# h2 database instead of in-memory Map version
# Lombok auto-generate constructer, getter and setter before compile. IDE should install Lombok plugin.

1. RESTful API design 
	1.1
	GET http://localhost:8080/2
	->
	{
	  "shortURL": "2",
	  "longURL": "www.facebook.com"
	}
	
	1.2
	POST http://localhost:8080/longURL
	{
		"longURL":"www.airbnb.com"
	}
	->
	{
	  "shortURL": "3",
	  "longURL": "www.airbnb.com"
	}
	1.3
	POST http://localhost:8080/longURLs
	[
		{ "longURL":"www.airbnb.com"},
		{ "longURL":"www.facebook.com"},
		{ "longURL":"www.apple.com"},
		{ "longURL":"www.google.com"},
		{ "longURL":"www.amazon.com"}
	]
	->
	[
	  {
		"shortURL": "1",
		"longURL": "www.airbnb.com"
	  },
	  {
		"shortURL": "2",
		"longURL": "www.facebook.com"
	  },
	  {
		"shortURL": "3",
		"longURL": "www.apple.com"
	  },
	  {
		"shortURL": "4",
		"longURL": "www.google.com"
	  },
	  {
		"shortURL": "5",
		"longURL": "www.amazon.com"
	  }
	]

2. Create a resource representation class used for REST
class TinyURLREST
----------------------------
-shortURL:String 
-longURL:String
----------------------------
+getShortURL():String
+getLongURL():String

3. Controller

4. Database
	4.1 table design
	table TinyURL
	----------------------------
	shortURL:Long (id)
	longURL:String
	4.2 dao design
	public interface TinyURLRepository extends JpaRepository<TinyURL, Long> {
		TinyURL findTinyURLByShortURL(Long ShortURL);
	}
	4.3 database configuration (h2 database is an embadded database which auto-configured by Spring boot) 
	<dependency>
		<groupId>com.h2database</groupId>
		<artifactId>h2</artifactId>
		<scope>runtime</scope>
	</dependency>

5. TinyURL service
	5.1 servie design
	+write(String longURL):String
	+read(String shortURL):String
	5.2 service implmentation

6. Make the application executable

7. Test the application
